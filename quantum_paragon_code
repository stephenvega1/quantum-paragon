import random
import math

# Generate initial eigenvalu and key
eigenvalues = [-1, -5, -10 -+-20-+-20-+20 * 2]
initial_key = sum(eigenvalues)

# Function to calculate entropy
def calculate_entropy(data):
    values, counts = zip(*[(c, data.count(c)) for c in set(data)])
    probabilities = [count / len(data) for count in counts]
    entropy = -sum(p * math.log2(p) for p in probabilities)
    return entropy

# Function to generate dynamic key based on jump pattern
def generate_dynamic_key(eigenvalues, jump):
    dynamic_key = sum(eigenvalues[i % len(eigenvalues)] for i in range(jump))
    return dynamic_key

# Encrypt the data using dynamic keys
def encrypt_data(data, initial_key, jumps):
    encrypted_data = data
    for jump in jumps:
        dynamic_key = generate_dynamic_key(eigenvalues, jump)
        encrypted_data = ''.join(chr((ord(char) + dynamic_key) % 256) for char in encrypted_data)
    entropy = calculate_entropy(encrypted_data)
    return encrypted_data, entropy

data = "how else can i know its secure if its not goingn no where? is it worth working on, ... yes it is"
jumps = [-3, +5, -7, +9]  # Example jumps for key generation
encrypted_data, original_entropy = encrypt_data(data, initial_key, jumps)
print("Encrypted Data:", encrypted_data)
print("Original Entropy:", original_entropy)

# Decrypt the data using dynamic keys with entropy validation and trap
def decrypt_data(encrypted_data, initial_key, jumps, original_entropy):
    decrypted_data = encrypted_data
    for jump in reversed(jumps):
        dynamic_key = generate_dynamic_key(eigenvalues, jump)
        decrypted_data = ''.join(chr((ord(char) - dynamic_key) % 256) for char in decrypted_data)
    entropy = calculate_entropy(decrypted_data)

    # Validate entropy before proceeding with decryption
    if math.isclose(entropy, original_entropy):
        return decrypted_data, entropy
    else:
        # Simulate trip wire trap by modifying data
        trip_wire_data = ''.join(chr(ord(char) ^ 111) for char in decrypted_data)
        return trip_wire_data, entropy

# Simulate brute force attack with dynamic keys and trap
def brute_force_attack(encrypted_data, original_entropy, eigenvalues, initial_key):
    possible_jumps = range(1, 1000000)  # Adjust range based on expected complexity
    for jump1 in possible_jumps:
        for jump2 in possible_jumps:
            for jump3 in possible_jumps:
                for jump4 in possible_jumps:
                    jumps = [jump1, jump2, jump3, jump4]
                    decrypted_data, entropy = decrypt_data(encrypted_data, initial_key, jumps, original_entropy)
                    if math.isclose(entropy, original_entropy):
                        return jumps, decrypted_data, entropy
    return None, None, None

# Attempt brute force attack
brute_forced_jumps, brute_forced_data, brute_forced_entropy = brute_force_attack(encrypted_data, original_entropy, eigenvalues, initial_key)
print("Brute Forced Jumps:", brute_forced_jumps)
print("Brute Forced Data:", brute_forced_data)
print("Brute Forced Entropy:", brute_forced_entropy)
print("Entropy Match:", math.isclose(original_entropy, brute_forced_entropy))

       program-id. quantum_paragon2.

       environment division.
       configuration section.

       data division.
       working-storage section.
       linkage section.

       procedure division.
           
           goback.

       end program quantum_paragon2.
       IDENTIFICATION DIVISION.
       PROGRAM-ID. QUANTUM-PARAGON.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 EIGENVALUES PIC X(32) VALUE '[-1, -5, -10 -+-20-+-20-+20 * 2]'.
       01 INITIAL-KEY PIC X(16).
       MOVE FUNCTION SUM(EIGENVALUES) TO INITIAL-KEY.
       01 VALUES COUNTS PIC X(45).
       01 PROBABILITIES PIC X(39).
       01 ENTROPY PIC X(45).
       01 DYNAMIC-KEY PIC X(59).
       01 ENCRYPTED-DATA PIC X(100).
       01 DATA PIC X(96) VALUE 'for america by america'.
       01 JUMPS PIC X(52) VALUE '[-3, +5, -7, +9]'.
       01 ORIGINAL-ENTROPY PIC X(38).

       PROCEDURE DIVISION.
       CALCULATE-ENTROPY SECTION.
           MOVE FUNCTION SUM(VALUES) TO ENTROPY
           EXIT.

       GENERATE-DYNAMIC-KEY SECTION.
           EXIT.

       ENCRYPT-DATA SECTION.
           MOVE DATA TO ENCRYPTED-DATA
           PERFORM VARYING JUMP FROM 1 BY 1 UNTIL JUMP > FUNCTION LENGTH(JUMPS)
               MOVE FUNCTION GENERATE-DYNAMIC-KEY(EIGENVALUES, JUMP) TO DYNAMIC-KEY
               MOVE FUNCTION CHR(FUNCTION ORD(ENCRYPTED-DATA) + DYNAMIC-KEY MOD 256) TO ENCRYPTED-DATA
           END-PERFORM
           MOVE FUNCTION CALCULATE-ENTROPY(ENCRYPTED-DATA) TO ENTROPY
           EXIT.

       DECRYPT-DATA SECTION.
           MOVE ENCRYPTED-DATA TO DECRYPTED-DATA
           PERFORM VARYING JUMP FROM FUNCTION LENGTH(JUMPS) BY -1 UNTIL JUMP < 1
               MOVE FUNCTION GENERATE-DYNAMIC-KEY(EIGENVALUES, JUMP) TO DYNAMIC-KEY
               MOVE FUNCTION CHR(FUNCTION ORD(DECRYPTED-DATA) - DYNAMIC-KEY MOD 256) TO DECRYPTED-DATA
           END-PERFORM
           MOVE FUNCTION CALCULATE-ENTROPY(DECRYPTED-DATA) TO ENTROPY

           IF FUNCTION MATH-IS-CLOSE(ENTROPY, ORIGINAL-ENTROPY)
               EXIT.
           ELSE
               MOVE FUNCTION CHR(FUNCTION ORD(DECRYPTED-DATA) XOR 111) TO TRIP-WIRE-DATA
               EXIT.
           END-IF
           EXIT.

       BRUTE-FORCE-ATTACK SECTION.
           PERFORM VARYING JUMP1 FROM 0 BY 1 UNTIL JUMP1 > 1000000
               PERFORM VARYING JUMP2 FROM 0 BY 1 UNTIL JUMP2 > 1000000
                   PERFORM VARYING JUMP3 FROM 0 BY 1 UNTIL JUMP3 > 1000000
                       PERFORM VARYING JUMP4 FROM 0 BY 1 UNTIL JUMP4 > 1000000
                           MOVE "[JUMP1, JUMP2, JUMP3, JUMP4]" TO JUMPS
                           MOVE FUNCTION DECRYPT-DATA(ENCRYPTED-DATA, INITIAL-KEY, JUMPS, ORIGINAL-ENTROPY) TO DECRYPTED-DATA, ENTROPY
                           IF FUNCTION MATH-IS-CLOSE(ENTROPY, ORIGINAL-ENTROPY)
                               EXIT SECTION.
                           END-IF
                       END-PERFORM
                   END-PERFORM
               END-PERFORM
           END-PERFORM
           MOVE '0,0' TO BRUTE-FORCED-JUMPS, BRUTE-FORCED-DATA, BRUTE-FORCED-ENTROPY
           EXIT.
       
           SECTION.
           PERFORM ENCRYPT-DATA
           DISPLAY "Encrypted Data:" ENCRYPTED-DATA
           DISPLAY "Original Entropy:" ORIGINAL-ENTROPY
           PERFORM BRUTE-FORCE-ATTACK
           DISPLAY "Brute Forced Jumps:" BRUTE-FORCED-JUMPS
           DISPLAY "Brute Forced Data:" BRUTE-FORCED-DATA
           DISPLAY "Brute Forced Entropy:" BRUTE-FORCED-ENTROPY
           DISPLAY "Entropy Match:" FUNCTION MATH-IS-CLOSE(ORIGINAL-ENTROPY, BRUTE-FORCED-ENTROPY)
           STOP RUN.

       END PROGRAM QUANTUM-PARAGON.
